package classes.database;

import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Class provides various database functionality.
 */
public class DbLib {
    private PrintWriter out;
    private Connection con;

    public DbLib(PrintWriter out) {
        this.out = out;
    }

    /**
     * This method will register a player in the database after a player
     * has written a player name, and chosen a fighter on the front page.
     * Player ID will be automatically generated by Class GenerateID.
     * @param playerName - The player name chosen be the player.
     * @param fighterName - The name of the fighter the player has chosen.
     * @throws SQLException
     */
    public void registerPlayerInDB(String playerName, String fighterName) throws SQLException {
        con = new DbTool().logIn(out);

        GenerateID idGen = new GenerateID();
        String playerID = idGen.getNewPlayerID();

        try {
            String stmt = "INSERT INTO battlegroundDB.player(playerID, playerName, fighterName) VALUES(?,?,?)";
            PreparedStatement pst = con.prepareStatement(stmt);
            pst.setString(1, playerID);
            pst.setString(2, playerName);
            pst.setString(3, fighterName);
            pst.executeUpdate();

        }
        catch (SQLException e) {
            System.err.println("Exception in method insertIntoDB   " + e);
        }
        finally {
            closeConnections(out, con);
        }
    }

    /**
     * This method will update any table (change / insert a value on a table) in the battlegroundDB.
     * @param table - Which table to update.
     * @param columnToUpdate - Which column to update.
     * @param valueToInsert - Which value to be inserted.
     * @param rowIdName -   The name of the column that will identify the row to be updated.
     *                      This will most likely be an ID (I.e playerID or gameID).
     * @param valueOfRowID - The value of the column name. If updating a value on a specific player,
     *                       This could be the value of the playerID.
     * @throws SQLException
     */
    public void updateTable(String table, String columnToUpdate, String valueToInsert, String rowIdName, String valueOfRowID) throws SQLException {
        con = new DbTool().logIn(out);
        try {
            String stmt = "UPDATE battlegroundDB." + table +
                    " SET " + columnToUpdate + " = ?" +
                    " WHERE " + rowIdName + " = ?";

            PreparedStatement pst = con.prepareStatement(stmt);
            pst.setString(1, valueToInsert);
            pst.setString(2, valueOfRowID);
            pst.executeUpdate();
        } catch (SQLException e) {
            System.err.println("Error in updateTable method -  " + e);
        } finally {
            closeConnections(out, con);
        }
    }

    /**
     * getField will take parameters to create a SQL-statement that retrieves any single record of the
     * RoombookingDB-schema.
     * @param whatToSelect is the name of the record (column name) wanted.
     * @param tableToSearch is the name of the table the attribute is in.
     * @param whereCondition is the condition that the record should be matched against.
     * @param whereParameter the exact value of the condition used for the matching.
     * @return a String that contains the value of the record found.
     */
    public String getField(String whatToSelect, String tableToSearch, String whereCondition, String whereParameter) throws SQLException {
        con = new DbTool().logIn(out);
        try {
            String stmt =   "SELECT " + whatToSelect +
                    " FROM battlegroundDB." + tableToSearch +
                    " WHERE " + whereCondition + " = ?";

            PreparedStatement pst = con.prepareStatement(stmt);
            pst.setString(1, whereParameter);
            ResultSet searchResultSet = pst.executeQuery();

            if(searchResultSet.next()){
                String searchResult = searchResultSet.getString(1);
                return searchResult;
            }
        }
        catch (SQLException e){
            out.println("Exeption in getField: " + e);
        }finally {
            closeConnections(out, con);
        }
        return null;
    }

    /**
     * Close connections after finishing the operation on the Database.
     * @param out
     * @param con
     * @throws SQLException
     */
    private void closeConnections(PrintWriter out, Connection con) throws SQLException {
        if (out != null) {
        }
        if (con != null){
            con.close();
        }
    }
}